buildscript {
    repositories { mavenCentral() }
    dependencies {
        // used at configuration-time for version info
        classpath 'org.eclipse.jgit:org.eclipse.jgit:5.7.+'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'antlr'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'maven-publish'
    id 'com.github.kt3k.coveralls' version '2.12.2'
    id 'com.gradleup.shadow' version '9.2.2'
    id 'de.undercouch.download' version '5.6.0'
}


import de.undercouch.gradle.tasks.download.Download
import org.eclipse.jgit.api.Git
import org.eclipse.jgit.lib.Constants
import org.eclipse.jgit.lib.ObjectId

import java.util.regex.Pattern

application {
    mainClass = "de.peeeq.wurstio.Main"
}

version = "1.8.1.0"

java {
    toolchain { languageVersion = JavaLanguageVersion.of(25) }
}
tasks.withType(JavaCompile).configureEach { options.release = 25 }

jacoco {
    toolVersion = "0.8.13"
}

jacocoTestReport {
    dependsOn test
    reports { xml.required.set(true) }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/ast/**', '**/jassAst/**', '**/jassIm/**', '**/luaAst/**', '**/antlr/**'
            ])
        }))
    }
}

def genDir = "$projectDir/src-gen"

sourceSets {
    main {
        java.srcDir(genDir)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

configurations {
    // isolated classpath for the generator
    astgen
}

dependencies {
    implementation 'org.jetbrains:annotations:23.0.0'

    // Antlr
    antlr "org.antlr:antlr4:4.13.1"

    // abstractsyntaxgen (available to IDE via compileOnly; used at runtime via astgen)
    compileOnly 'com.github.peterzeller:abstractsyntaxgen:623da1c60f'
    astgen 'com.github.peterzeller:abstractsyntaxgen:623da1c60f'


    // Tests
    testImplementation 'org.testng:testng:7.8.0'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'

    // Libs
    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation 'io.vavr:vavr:0.10.4'
    implementation 'org.eclipse.lsp4j:org.eclipse.lsp4j:0.21.1'
    implementation 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.1.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.apache.velocity:velocity:1.7'
    implementation 'com.github.albfernandez:juniversalchardet:2.4.0'
    implementation 'com.github.inwc3:jmpq3:3183dd7680'
    implementation 'com.github.inwc3:wc3libs:c3f131a0e5'
    implementation 'com.github.wurstscript:wurstsetup:475cc7fae8'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'ch.qos.logback:logback-classic:1.5.13'
    implementation 'org.eclipse.jgit:org.eclipse.jgit:6.7.0.202309050840-r'
    implementation 'org.eclipse.jgit:org.eclipse.jgit.ssh.apache:6.7.0.202309050840-r'
    implementation 'it.unimi.dsi:fastutil:8.5.16'

    // Smallcheck
    testImplementation 'com.github.peterzeller:java-smallcheck:3f6a178ba7'
}

configurations.configureEach {
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "log4j", module: "log4j"
}

/** -------- AST generation (abstractsyntaxgen) -------- */

def parseqFiles = fileTree(dir: 'parserspec', include: '*.parseq')

def pkgPattern = Pattern.compile(/package\s+(\S+)\s*;/)

tasks.register('genAst') {
    // make it incremental/cacheable
    inputs.files(parseqFiles)
    outputs.dir(genDir)

    doLast {
        // fetch ExecOperations from Gradle services (no @Inject needed)
        ExecOperations execOps = project.services.get(ExecOperations)

        parseqFiles.files.each { File f ->
            String contents = f.getText('UTF-8')
            def m = pkgPattern.matcher(contents)
            String pkg = m.find() ? m.group(1) : ""
            File targetDir = file("$genDir/${pkg.replace('.', '/')}")

            targetDir.mkdirs()

            // run: asg.Main <file> <targetDir>  using isolated classpath
            execOps.javaexec {
                classpath = configurations.astgen
                mainClass.set('asg.Main')
                args(f.absolutePath, targetDir.absolutePath)
            }
        }
    }
}

/** -------- Version info file generation -------- */

tasks.register('versionInfoFile') {
    description "Generates a file CompileTimeInfo.java with version number etc."

    // resolve git info at configuration time
    Git git = Git.open(new File(rootProject.projectDir, '..'))
    ObjectId head = git.getRepository().resolve(Constants.HEAD)
    String gitRevision = head.abbreviate(8).name()
    String gitRevisionlong = head.getName()
    String tag = git.describe().setTarget(head).setAlways(true).setTags(true).call()
    String wurstVersion = "${version}-${tag}"

    inputs.property("wurstVersion", wurstVersion)

    def dir = new File("$genDir/de/peeeq/wurstscript/")
    def out = new File(dir, 'CompileTimeInfo.java')
    outputs.file(out)

    doLast {
        dir.mkdirs()
        String currentTime = new Date().format("yyyy/MM/dd KK:mm:ss")
        out.text = """
        package de.peeeq.wurstscript;

        public class CompileTimeInfo {
            public static final String time="${currentTime}";
            public static final String revision="${gitRevision}";
            public static final String revisionLong="${gitRevisionlong}";
            public static final String version="${wurstVersion}";
        }
        """
    }
}

/** -------- Aggregate generation + wiring into compile -------- */

tasks.register('gen') {
    description "Generates code from various input files"
    dependsOn 'genAst', 'versionInfoFile', 'generateGrammarSource'
}
tasks.named('compileJava') { it.dependsOn('gen') }

/** -------- Tests -------- */

test {
    jvmArgs = ['-Xms256m']
    useTestNG()
}

/** -------- Clean generated sources -------- */
tasks.named('clean') {
    doFirst { delete genDir }
}

/** -------- Download helpers -------- */

tasks.register('downloadZipFile', Download) {
    src 'https://github.com/wurstscript/wurstStdlib2/archive/master.zip'
    dest new File(buildDir, 'stdlib2.zip')
}

tasks.register('downloadAndUnzipFile', Copy) {
    dependsOn 'downloadZipFile'
    from zipTree(tasks.named('downloadZipFile').get().dest)
    into new File(buildDir, '/deps/')
}

/** -------- Shadow / packaging -------- */

shadowJar {
    archiveBaseName.set('wurstscript')
    archiveClassifier.set('')
    archiveVersion.set('')
    manifest { attributes 'Main-Class': application.mainClass.get() }
}

def fatJar = shadowJar.archiveFile.map { it.asFile }

tasks.register('make_for_userdir', Copy) {
    dependsOn 'shadowJar'
    from fatJar
    into "${System.properties['user.home']}/.wurst/"
}

tasks.register('make_for_wurstpack', Copy) {
    dependsOn 'shadowJar'
    from fatJar
    into '../Wurstpack/wurstscript/'
}

tasks.register('create_zip_wurstpack_complete', Zip) {
    dependsOn 'make_for_wurstpack'
    from '../Wurstpack'
    archiveFileName.set('wurstpack_complete.zip')
}

tasks.register('create_zip_wurstpack_compiler', Zip) {
    dependsOn 'make_for_wurstpack'
    from '../Wurstpack/wurstscript/'
    archiveFileName.set('wurstpack_compiler.zip')
}

tasks.register('create_zips') {
    dependsOn 'shadowJar', 'create_zip_wurstpack_complete', 'create_zip_wurstpack_compiler'

    doLast {
        ExecOperations execOps = project.services.get(ExecOperations)

        mkdir("../downloads/")

        copy {
            from fatJar.get()
            into '../downloads/'
        }
        copy {
            from '../Wurstpack'
            into '../downloads/Wurstpack/'
        }
        copy {
            from '../WurstSetup/build/libs/WurstSetup.jar'
            into '../downloads/'
        }

        mkdir("../Checksums/bin")
        execOps.javaexec {
            classpath = sourceSets.main.runtimeClasspath
            mainClass.set('de.peeeq.wurstio.Checksums')
            args("../downloads/Wurstpack/", "../downloads/wurstpack.md5")
        }
    }
}

/** -------- Hotdoc generation -------- */

tasks.register('generate_hotdoc') {
    dependsOn 'compileJava', 'downloadAndUnzipFile'

    doLast {
        ExecOperations execOps = project.services.get(ExecOperations)

        copy {
            from("src/main/resources/")
            // Gradle 9 output classes dir
            into("build/classes/java/main/")
        }
        execOps.javaexec {
            classpath = sourceSets.main.runtimeClasspath
            mainClass.set('de.peeeq.wurstio.Main')
            args("--hotdoc", "./build/deps/", "../downloads/hotdoc")
        }
    }
}

/** -------- Apply deployment settings -------- */
apply from: 'deploy.gradle'
