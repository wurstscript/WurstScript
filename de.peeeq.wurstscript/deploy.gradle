// To publish first run ./gradlew installDist
// then copy to wurstpack folder

jar {
    version = null
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
                'Main-Class': mainClassName
        )
    }
}

task make_for_userdir(type: Copy) {
    from 'build/install/wurstscript/lib'
    into "${System.properties['user.home']}/.wurst/"
}

make_for_userdir.dependsOn(installDist)

task make_for_wurstpack(type: Copy) {
    from 'build/install/wurstscript/lib'
    into '../Wurstpack/wurstscript/'
}
make_for_wurstpack.dependsOn(installDist)


task create_zip_wurstpack_complete(type: Zip) {
    from '../Wurstpack'
    archiveName 'wurstpack_complete.zip'
}
create_zip_wurstpack_complete.dependsOn(make_for_wurstpack)

task create_zip_wurstpack_compiler(type: Zip) {
    from '../Wurstpack/wurstscript/'
    archiveName 'wurstpack_compiler.zip'
}
create_zip_wurstpack_compiler.dependsOn(make_for_wurstpack)



task create_zips {
    doLast {
        mkdir("../downloads/")
        copy {
            from 'build/distributions/'
            into '../downloads/'
        }
        copy {
            from 'build/install/wurstscript/lib/wurstscript.jar'
            into '../downloads/'
        }
        copy {
            from '../Wurstpack'
            into '../downloads/Wurstpack/'
        }
        copy {
            from '../WurstSetup/build/libs/WurstSetup.jar'
            into '../downloads/'
        }
        // create checksums
        mkdir("../Checksums/bin")

        javaexec {
            classpath = sourceSets.main.runtimeClasspath
            main = "de.peeeq.wurstio.Checksums"
            args = ["../downloads/Wurstpack/",
                    "../downloads/wurstpack.md5"]
        }
    }
}
create_zips.dependsOn(installDist)
create_zips.dependsOn(create_zip_wurstpack_complete)
create_zips.dependsOn(create_zip_wurstpack_compiler)

task generate_hotdoc {
    doLast {
        copy {
            from("/src/main/resources/")
            into("/build/classes/main/")
        }
        javaexec {
            classpath = sourceSets.main.runtimeClasspath
            main = "de.peeeq.wurstio.Main"
            args = ["--hotdoc",
                    "./build/deps/",
                    "../downloads/hotdoc"]
        }
    }
}
generate_hotdoc.dependsOn(compileJava)
generate_hotdoc.dependsOn(downloadAndUnzipFile)
